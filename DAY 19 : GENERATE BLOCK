//Create a 100-bit binary ripple-carry adder by instantiating 100 full adders. The adder adds two 100-bit numbers and a carry-in to produce a 100-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from each full adder in the ripple-carry adder. cout[99] is the final carry-out from the last full adder, and is the carry-out you usually see.

module top_module( 
    input [99:0] a, b,
    input cin,
    output [99:0] cout,
    output [99:0] sum );
    assign {cout[0],sum[0]} = a[0] + b[0] + cin;
    genvar i;
    generate
        begin
            for(i =1;i<100;i=i+1)
                begin : gen
                FA fa1(.fsum(sum[i]),.fcarry(cout[i]),.in1(a[i]),.in2(b[i]),.cin(cout[i-1]));
                end : gen
        end
    endgenerate

endmodule

module FA(output fsum,fcarry,input in1,in2,cin);
    assign {fcarry,fsum} = in1+in2+cin;
endmodule
